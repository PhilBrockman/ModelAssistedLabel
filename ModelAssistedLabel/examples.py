# AUTOGENERATED! DO NOT EDIT! File to edit: index.ipynb (unless otherwise specified).

__all__ = ['prepare_split', 'organize', 'generate_weights', 'tidy_weights']

# Cell
def prepare_split(resource_dir, out_dir = ".", data_yaml=None, MAX_SIZE=5, verbose=True):
  if data_yaml is None:
    data_yaml = Defaults().data_yaml

  g = Generation(repo=resource_dir, out_dir=out_dir, data_yaml=data_yaml)
  g.set_split(MAX_SIZE=MAX_SIZE)

  def tostr(split):
    return [{k: len(v)} for k,v in split.items()]

  def sumg(split):
    return sum([list(x.values())[0] for x in tostr(split)])

  if verbose:
    print("summary: ", tostr(g.split))
    print("checksum:", sumg(g.split))

  return g

# Cell
def organize(gen, name):
  zipped = g.process_split(name) #create a zip file in the ROOT directory
  local = os.path.basename(zipped)
  os.system(f'unzip "{local}"') #grab data
  #move the contents of the zip file into postion within the ROOT directory
  for splt in ["test/", "train/", "valid/", "data.yaml"]:
    os.system(f"mv '{local[:-4]}/{splt}' .")

  #remove zip file
  os.system(f"rm -f -r '{local}'")
  #removed the folder that was taken out of the zip
  os.system(f"rm -f -r '{local[:-4]}'")


# Cell
from .core import Trainer

def generate_weights(repo, name):
  g = prepare_split(repo)
  organize(gen=g, name=name)
  t = Trainer(name)
  train_path = "yolov5/runs/train"
  ldir = lambda path: set(os.listdir(path))

  before = ldir(train_path)
  t.train(1)
  after = ldir(train_path)

  current = list(after - before)[0]
  return os.path.join(train_path, current)

# Cell
from datetime import datetime

def tidy_weights(repo, name, out_dir=None):
  if out_dir is None:
    out_dir = repo
  results_path = generate_weights(repo, name)

  while True:
    now = datetime.now()
    out = "{os.path.basename(results_path)}-{now.strftime('%f')}"
    outfolder = os.path.join(out_dir, moved_filename)
    if not os.path.exists(outfolder):
      break
  os.system(f"mv '{results_path}' '{outfolder}'")
  return outfolder